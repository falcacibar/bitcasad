#!/usr/bin/python3
# bitcasad --  A bitcasa filesystem mounter and watcher daemon
#
#    Copyright (C) 2014 Felipe Alcacibar <falcacibar@gmail.com>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import os
import subprocess
import sys
import time
import configparser

from argparse import ArgumentParser

me         = 'bitcasad'

def init_arg_parser():
    parser = ArgumentParser()
    parser.add_argument(
        '-w', '--wait'
        , dest='wait'
        , help='Seconds to wait between checks'
        , metavar='secs'
        , type=int
        , default=2
    )

    parser.add_argument(
        '-o', '--options'
        , dest='mount_options'
        , help='Additional mount.bitcasa options'
        , metavar='mount_opts'
        , default=''
    )

    parser.add_argument(
        '-b', '--bitcasa'
        , dest='mount_bitcasa'
        , help='mount.bitcasa binary file'
        , metavar='path'
        , default='mount.bitcasa'
    )

    parser.add_argument(
        '-f', '--fusermount'
        , dest='fusermount'
        , help='fusermount binary file'
        , metavar='path'
        , default='fusermount'
    )

    parser.add_argument(
        '-l', '--logfile'
        , dest='log_file'
        , help='Log file path'
        , metavar='path'
        , default='stdout'
    )

    return parser

def init_logging(logfile):
    import logging

    log = logging.getLogger()
    log.setLevel(logging.DEBUG)
    
    if logfile == 'stdout':        
        ch = logging.StreamHandler(sys.stdout)
    else:
        ch = logging.FileHandler(logfile)
    
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter(fmt='%(asctime)s ' + me + '[%(process)s] %(levelname)s%(message)s', datefmt="%Y-%m-%d %H:%M:%S")
    ch.setFormatter(formatter)
    log.addHandler(ch)

    logging.addLevelName(logging.ERROR, '[error] ')
    logging.addLevelName(logging.WARN, '[warn] ')
    logging.addLevelName(logging.INFO, '')

    return log

def umount_all(*args, **kwargs):
    mounts  = mount_data(cred_paths)

    for cred_file in mounts.keys():
        for mount_point in mounts[cred_file].keys():
            if os.path.ismount(mount_point):
                log.info('Unmounting %s' % mount_point)
                proc = subprocess.Popen(
                                [
                                    'fusermount'
                                    , '-u'
                                    , mount_point
                                ]
                                , stdout=subprocess.PIPE
                                , stderr=subprocess.PIPE
                )

                proc.wait()

    log.info("Terminating %s" % me)
    sys.exit(0)


def init_signal_trap():
    import signal

    for sig in [2, 3, 4, 5, 6, 14, 15, 18, 22, 26, 28, 30, 31]:
        signal.signal(sig ,umount_all)

def mount_data(cred_files):
    mounts = {}

    for cred_file in cred_files:
        if os.path.isfile(cred_file):
            conf = configparser.ConfigParser()
            conf.read(cred_file)

            mounts[cred_file] = {}

            for mount_point in conf.sections():
                mounts[cred_file][mount_point] = {};
                for option in conf.options(mount_point):
                    mounts[cred_file][mount_point][option] = conf.get(mount_point, option)

    if not len(mounts.keys()):
        print >>sys.stderr, "No credentials file found in %s\nfor more information do \"man mount.bitcasa\"" \
                            % (', '.join(cred_files))
        sys.exit(1)

    return mounts


if __name__ == '__main__':
    option     = init_arg_parser().parse_args()

    home       = os.getenv('HOME')
    cred_paths = [ home + '/.bitcasa/credentials.ini', '/etc/bitcasa.ini' ]

    fusermount = option.fusermount
    log        = init_logging(option.log_file)
    first_time = True;

    init_signal_trap()
    
    log.info("Starting %s" % me)

    try:
        while True:
            mounts = mount_data(cred_paths)

            for cred_file in mounts.keys():
                for mount_point in mounts[cred_file].keys():
                    if not os.path.ismount(mount_point):
                        if first_time:
                            log_msg    = "Mounting account %s in %s from %s"
                            first_time = False
                        else:
                            log_msg    = "Account %s in %s from %s is not mounted, trying again"

                        account = mounts[cred_file][mount_point]['account']

                        log.info(log_msg % ( account, mount_point, cred_file ))

                        proc    = subprocess.Popen(
                                        [
                                            option.mount_bitcasa
                                            , account
                                            , mount_point
                                            , '-o', 'cred=%s,%s' % (cred_file, option.mount_options)
                                        ]
                                        , stderr=subprocess.STDOUT
                                        , stdout=subprocess.PIPE
                        )

                        proc.wait()

                        if proc.returncode:
                            log.error(
                                        "Mounting %s: Process exit with status code %i \"%s\"" \
                                        % (
                                                mount_point
                                                , proc.returncode
                                                , proc.stdout.read(4096).replace('\n', ' ')
                                        )
                            )
                        else:
                            log.info("Folder %s was successfully mounted" % mount_point)

            time.sleep(option.wait)
    except KeyboardInterrupt:
            umount_all